#!/opt/miniconda/envs/default/bin/python
import os

import fire
import jupytext
import nbformat as nbf
from azureml.contrib.notebook import AzureMLNotebookHandler, NotebookRunConfig
from azureml.core import Environment, Experiment, ScriptRunConfig, Workspace

def main(notebook_path,
         target,
         conda_env_name='default',
         conda_env_yml='environment.yaml',
         cell_timeout=1200,
         **notebook_params):
  """
    Submits a notebook in jupytext %% format as an AML experiment. \n
    Notebook paramenters are passed as additional flags (e.g. --param1 bar --param2 baz).
    Args:
      notebook_path (str): path to notebook in jupytext %% format
      target (str): AML compute target name
      conda_env_name (str): Conda environment name
      conda_env_yml (str): path to Conda environment
      cell_timeout (int): Notebook cell timeout
  """

  # Convert jupytext to ipynb and write to ntbkstg
  ntbk = jupytext.read(notebook_path)
  kernelspec = {"display_name": f"Python [conda env:{conda_env_name}]", "language": "python", "name": conda_env_name}
  ntbk['metadata']['kernelspec'] = kernelspec
  ntbkstg_path = os.path.dirname(notebook_path)
  nb_name = os.path.splitext(os.path.basename(notebook_path))[0]
  nbf.write(ntbk, f'{ntbkstg_path}/{nb_name}.stg.ipynb')

  # Get workspace
  ws = Workspace.from_config()

  # Setup run configuration
  compute_target = ws.compute_targets[target]
  env = Environment.from_conda_specification(conda_env_name, file_path=conda_env_yml)
  src = ScriptRunConfig(source_directory=ntbkstg_path, compute_target=compute_target, environment=env)

  # Submit experiment
  handler = AzureMLNotebookHandler(timeout=cell_timeout)
  rc = NotebookRunConfig(source_directory=ntbkstg_path,
                         notebook=f'{nb_name}.stg.ipynb',
                         output_notebook=f'outputs/{nb_name}.ipynb',
                         parameters=notebook_params,
                         handler=handler,
                         run_config=src.run_config)

  exp = Experiment(workspace=ws, name=nb_name)
  exp.submit(config=rc)

if __name__ == '__main__':
  fire.Fire(main)
